// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:flutter/material.dart' show debugPrint;

import '../../../models/photo_entity.dart';


JsonConvert jsonConvert = JsonConvert();

typedef JsonConvertFunction<T> = T Function(Map<String, dynamic> json);
typedef EnumConvertFunction<T> = T Function(String value);
typedef ConvertExceptionHandler = void Function(Object error, StackTrace stackTrace);
extension MapSafeExt<K, V> on Map<K, V> {
  T? getOrNull<T>(K? key) {
    if (!containsKey(key) || key == null) {
      return null;
    } else {
      return this[key] as T?;
    }
  }
}

class JsonConvert {
  static ConvertExceptionHandler? onError;
  JsonConvertClassCollection convertFuncMap = JsonConvertClassCollection();

  /// When you are in the development, to generate a new model class, hot-reload doesn't find new generation model class, you can build on MaterialApp method called jsonConvert. ReassembleConvertFuncMap (); This method only works in a development environment
  /// https://flutter.cn/docs/development/tools/hot-reload
  /// class MyApp extends StatelessWidget {
  ///    const MyApp({Key? key})
  ///        : super(key: key);
  ///
  ///    @override
  ///    Widget build(BuildContext context) {
  ///      jsonConvert.reassembleConvertFuncMap();
  ///      return MaterialApp();
  ///    }
  /// }
  void reassembleConvertFuncMap() {
    bool isReleaseMode = const bool.fromEnvironment('dart.vm.product');
    if (!isReleaseMode) {
      convertFuncMap = JsonConvertClassCollection();
    }
  }

  T? convert<T>(dynamic value, {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    if (value is T) {
      return value;
    }
    try {
      return _asT<T>(value, enumConvert: enumConvert);
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      if (onError != null) {
        onError!(e, stackTrace);
      }
      return null;
    }
  }

  List<T?>? convertList<T>(List<dynamic>? value,
      {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    try {
      return value.map((dynamic e) => _asT<T>(e, enumConvert: enumConvert))
          .toList();
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      if (onError != null) {
        onError!(e, stackTrace);
      }
      return <T>[];
    }
  }

  List<T>? convertListNotNull<T>(dynamic value,
      {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    try {
      return (value as List<dynamic>).map((dynamic e) =>
      _asT<T>(e, enumConvert: enumConvert)!).toList();
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      if (onError != null) {
        onError!(e, stackTrace);
      }
      return <T>[];
    }
  }

  T? _asT<T extends Object?>(dynamic value,
      {EnumConvertFunction? enumConvert}) {
    final String type = T.toString();
    final String valueS = value.toString();
    if (enumConvert != null) {
      return enumConvert(valueS) as T;
    } else if (type == "String") {
      return valueS as T;
    } else if (type == "int") {
      final int? intValue = int.tryParse(valueS);
      if (intValue == null) {
        return double.tryParse(valueS)?.toInt() as T?;
      } else {
        return intValue as T;
      }
    } else if (type == "double") {
      return double.parse(valueS) as T;
    } else if (type == "DateTime") {
      return DateTime.parse(valueS) as T;
    } else if (type == "bool") {
      if (valueS == '0' || valueS == '1') {
        return (valueS == '1') as T;
      }
      return (valueS == 'true') as T;
    } else if (type == "Map" || type.startsWith("Map<")) {
      return value as T;
    } else {
      if (convertFuncMap.containsKey(type)) {
        if (value == null) {
          return null;
        }
        return convertFuncMap[type]!(value as Map<String, dynamic>) as T;
      } else {
        throw UnimplementedError(
            '$type unimplemented,you can try running the app again');
      }
    }
  }

  //list is returned by type
  static M? _getListChildType<M>(List<Map<String, dynamic>> data) {
    if (<PhotoEntity>[] is M) {
      return data.map<PhotoEntity>((Map<String, dynamic> e) =>
          PhotoEntity.fromJson(e)).toList() as M;
    }
    // if (<CoffeeItemEntity>[] is M) {
    //   return data.map<CoffeeItemEntity>((Map<String, dynamic> e) =>
    //       CoffeeItemEntity.fromJson(e)).toList() as M;
    // }
    // if (<CreateCupEntity>[] is M) {
    //   return data.map<CreateCupEntity>((Map<String, dynamic> e) =>
    //       CreateCupEntity.fromJson(e)).toList() as M;
    // }
    // if (<CupDropperEntity>[] is M) {
    //   return data.map<CupDropperEntity>((Map<String, dynamic> e) =>
    //       CupDropperEntity.fromJson(e)).toList() as M;
    // }
    // if (<CupDropperCup>[] is M) {
    //   return data.map<CupDropperCup>((Map<String, dynamic> e) =>
    //       CupDropperCup.fromJson(e)).toList() as M;
    // }
    // if (<aicameraCreateStepsEntity>[] is M) {
    //   return data.map<aicameraCreateStepsEntity>((Map<String, dynamic> e) =>
    //       aicameraCreateStepsEntity.fromJson(e)).toList() as M;
    // }
    // if (<MaterialEntity>[] is M) {
    //   return data.map<MaterialEntity>((Map<String, dynamic> e) =>
    //       MaterialEntity.fromJson(e)).toList() as M;
    // }
    // if (<OptionEntity>[] is M) {
    //   return data.map<OptionEntity>((Map<String, dynamic> e) =>
    //       OptionEntity.fromJson(e)).toList() as M;
    // }
    // if (<aicameraEntity>[] is M) {
    //   return data.map<aicameraEntity>((Map<String, dynamic> e) =>
    //       aicameraEntity.fromJson(e)).toList() as M;
    // }
    // if (<aicameraInfoEntity>[] is M) {
    //   return data.map<aicameraInfoEntity>((Map<String, dynamic> e) =>
    //       aicameraInfoEntity.fromJson(e)).toList() as M;
    // }
    // if (<aicameraInfoCupDropper>[] is M) {
    //   return data.map<aicameraInfoCupDropper>((Map<String, dynamic> e) =>
    //       aicameraInfoCupDropper.fromJson(e)).toList() as M;
    // }
    // if (<aicameraInfoCupDropperCup>[] is M) {
    //   return data.map<aicameraInfoCupDropperCup>((Map<String, dynamic> e) =>
    //       aicameraInfoCupDropperCup.fromJson(e)).toList() as M;
    // }
    // if (<aicameraInfoaicameraSubTrialVOS>[] is M) {
    //   return data.map<aicameraInfoaicameraSubTrialVOS>((Map<String, dynamic> e) =>
    //       aicameraInfoaicameraSubTrialVOS.fromJson(e)).toList() as M;
    // }
    // if (<aicameraInfoaicameraSubTrialVOSMaterialList>[] is M) {
    //   return data.map<aicameraInfoaicameraSubTrialVOSMaterialList>((
    //       Map<String, dynamic> e) =>
    //       aicameraInfoaicameraSubTrialVOSMaterialList.fromJson(e)).toList() as M;
    // }
    // if (<aicameraInfoStepEntity>[] is M) {
    //   return data.map<aicameraInfoStepEntity>((Map<String, dynamic> e) =>
    //       aicameraInfoStepEntity.fromJson(e)).toList() as M;
    // }
    // if (<aicameraTypeEntity>[] is M) {
    //   return data.map<aicameraTypeEntity>((Map<String, dynamic> e) =>
    //       aicameraTypeEntity.fromJson(e)).toList() as M;
    // }
    // if (<aicameraTypeTags>[] is M) {
    //   return data.map<aicameraTypeTags>((Map<String, dynamic> e) =>
    //       aicameraTypeTags.fromJson(e)).toList() as M;
    // }
    // if (<aicameraTypeRecycleEntity>[] is M) {
    //   return data.map<aicameraTypeRecycleEntity>((Map<String, dynamic> e) =>
    //       aicameraTypeRecycleEntity.fromJson(e)).toList() as M;
    // }
    // if (<aicameraTypeTagEntity>[] is M) {
    //   return data.map<aicameraTypeTagEntity>((Map<String, dynamic> e) =>
    //       aicameraTypeTagEntity.fromJson(e)).toList() as M;
    // }
    // if (<aicameraTypeTagMaterialTags>[] is M) {
    //   return data.map<aicameraTypeTagMaterialTags>((Map<String, dynamic> e) =>
    //       aicameraTypeTagMaterialTags.fromJson(e)).toList() as M;
    // }
    // if (<LogsEntity>[] is M) {
    //   return data.map<LogsEntity>((Map<String, dynamic> e) =>
    //       LogsEntity.fromJson(e)).toList() as M;
    // }
    // if (<MaterielConfigCoffeeListEntity>[] is M) {
    //   return data.map<MaterielConfigCoffeeListEntity>((
    //       Map<String, dynamic> e) => MaterielConfigCoffeeListEntity.fromJson(e))
    //       .toList() as M;
    // }
    // if (<MaterielConfigCoffeeListMaterialVOSet>[] is M) {
    //   return data.map<MaterielConfigCoffeeListMaterialVOSet>((
    //       Map<String, dynamic> e) =>
    //       MaterielConfigCoffeeListMaterialVOSet.fromJson(e)).toList() as M;
    // }
    // if (<MaterielConfigPowderListEntity>[] is M) {
    //   return data.map<MaterielConfigPowderListEntity>((
    //       Map<String, dynamic> e) => MaterielConfigPowderListEntity.fromJson(e))
    //       .toList() as M;
    // }
    // if (<MaterielConfigPowderListMaterialVO>[] is M) {
    //   return data.map<MaterielConfigPowderListMaterialVO>((
    //       Map<String, dynamic> e) =>
    //       MaterielConfigPowderListMaterialVO.fromJson(e)).toList() as M;
    // }
    // if (<MaterielConfigSeparatorListEntity>[] is M) {
    //   return data.map<MaterielConfigSeparatorListEntity>((
    //       Map<String, dynamic> e) =>
    //       MaterielConfigSeparatorListEntity.fromJson(e)).toList() as M;
    // }
    // if (<MaterielConfigSeparatorListMaterialVO>[] is M) {
    //   return data.map<MaterielConfigSeparatorListMaterialVO>((
    //       Map<String, dynamic> e) =>
    //       MaterielConfigSeparatorListMaterialVO.fromJson(e)).toList() as M;
    // }
    // if (<MaterielConfigSyrupListEntity>[] is M) {
    //   return data.map<MaterielConfigSyrupListEntity>((Map<String, dynamic> e) =>
    //       MaterielConfigSyrupListEntity.fromJson(e)).toList() as M;
    // }
    // if (<MaterielConfigSyrupListMaterialVO>[] is M) {
    //   return data.map<MaterielConfigSyrupListMaterialVO>((
    //       Map<String, dynamic> e) =>
    //       MaterielConfigSyrupListMaterialVO.fromJson(e)).toList() as M;
    // }
    // if (<MaterielConfigWaterListEntity>[] is M) {
    //   return data.map<MaterielConfigWaterListEntity>((Map<String, dynamic> e) =>
    //       MaterielConfigWaterListEntity.fromJson(e)).toList() as M;
    // }
    // if (<MaterielConfigWaterListWaterVO>[] is M) {
    //   return data.map<MaterielConfigWaterListWaterVO>((
    //       Map<String, dynamic> e) => MaterielConfigWaterListWaterVO.fromJson(e))
    //       .toList() as M;
    // }
    // if (<MaterielCupDropperEntity>[] is M) {
    //   return data.map<MaterielCupDropperEntity>((Map<String, dynamic> e) =>
    //       MaterielCupDropperEntity.fromJson(e)).toList() as M;
    // }
    // if (<MaterielCupDropperCup>[] is M) {
    //   return data.map<MaterielCupDropperCup>((Map<String, dynamic> e) =>
    //       MaterielCupDropperCup.fromJson(e)).toList() as M;
    // }
    // if (<MaterielIceDeviceEntity>[] is M) {
    //   return data.map<MaterielIceDeviceEntity>((Map<String, dynamic> e) =>
    //       MaterielIceDeviceEntity.fromJson(e)).toList() as M;
    // }
    // if (<MaterielIceDeviceIceVO>[] is M) {
    //   return data.map<MaterielIceDeviceIceVO>((Map<String, dynamic> e) =>
    //       MaterielIceDeviceIceVO.fromJson(e)).toList() as M;
    // }
    // if (<MaterielManageItemEntity>[] is M) {
    //   return data.map<MaterielManageItemEntity>((Map<String, dynamic> e) =>
    //       MaterielManageItemEntity.fromJson(e)).toList() as M;
    // }
    // if (<MaterielTypeEntity>[] is M) {
    //   return data.map<MaterielTypeEntity>((Map<String, dynamic> e) =>
    //       MaterielTypeEntity.fromJson(e)).toList() as M;
    // }
    // if (<PowderEntity>[] is M) {
    //   return data.map<PowderEntity>((Map<String, dynamic> e) =>
    //       PowderEntity.fromJson(e)).toList() as M;
    // }
    // if (<RelevanceaicameraEntity>[] is M) {
    //   return data.map<RelevanceaicameraEntity>((Map<String, dynamic> e) =>
    //       RelevanceaicameraEntity.fromJson(e)).toList() as M;
    // }
    // if (<SeparatorItemEntity>[] is M) {
    //   return data.map<SeparatorItemEntity>((Map<String, dynamic> e) =>
    //       SeparatorItemEntity.fromJson(e)).toList() as M;
    // }
    // if (<SyrupEntity>[] is M) {
    //   return data.map<SyrupEntity>((Map<String, dynamic> e) =>
    //       SyrupEntity.fromJson(e)).toList() as M;
    // }
    // if (<UserEntity>[] is M) {
    //   return data.map<UserEntity>((Map<String, dynamic> e) =>
    //       UserEntity.fromJson(e)).toList() as M;
    // }
    // if (<UserSelectEntity>[] is M) {
    //   return data.map<UserSelectEntity>((Map<String, dynamic> e) =>
    //       UserSelectEntity.fromJson(e)).toList() as M;
    // }
    // if (<WaterEntity>[] is M) {
    //   return data.map<WaterEntity>((Map<String, dynamic> e) =>
    //       WaterEntity.fromJson(e)).toList() as M;
    // }

    debugPrint("$M not found");

    return null;
  }

  static M? fromJsonAsT<M>(dynamic json) {
    if (json is M) {
      return json;
    }
    if (json is List) {
      return _getListChildType<M>(
          json.map((dynamic e) => e as Map<String, dynamic>).toList());
    } else {
      return jsonConvert.convert<M>(json);
    }
  }
}

class JsonConvertClassCollection {
  Map<String, JsonConvertFunction> convertFuncMap = {
    (PhotoEntity).toString(): PhotoEntity.fromJson,
    // (CoffeeItemEntity).toString(): CoffeeItemEntity.fromJson,
    // (CreateCupEntity).toString(): CreateCupEntity.fromJson,
    // (CupDropperEntity).toString(): CupDropperEntity.fromJson,
    // (CupDropperCup).toString(): CupDropperCup.fromJson,
    // (aicameraCreateStepsEntity).toString(): aicameraCreateStepsEntity.fromJson,
    // (MaterialEntity).toString(): MaterialEntity.fromJson,
    // (OptionEntity).toString(): OptionEntity.fromJson,
    // (aicameraEntity).toString(): aicameraEntity.fromJson,
    // (aicameraInfoEntity).toString(): aicameraInfoEntity.fromJson,
    // (aicameraInfoCupDropper).toString(): aicameraInfoCupDropper.fromJson,
    // (aicameraInfoCupDropperCup).toString(): aicameraInfoCupDropperCup.fromJson,
    // (aicameraInfoaicameraSubTrialVOS).toString(): aicameraInfoaicameraSubTrialVOS
    //     .fromJson,
    // (aicameraInfoaicameraSubTrialVOSMaterialList)
    //     .toString(): aicameraInfoaicameraSubTrialVOSMaterialList.fromJson,
    // (aicameraInfoStepEntity).toString(): aicameraInfoStepEntity.fromJson,
    // (aicameraTypeEntity).toString(): aicameraTypeEntity.fromJson,
    // (aicameraTypeTags).toString(): aicameraTypeTags.fromJson,
    // (aicameraTypeRecycleEntity).toString(): aicameraTypeRecycleEntity.fromJson,
    // (aicameraTypeTagEntity).toString(): aicameraTypeTagEntity.fromJson,
    // (aicameraTypeTagMaterialTags).toString(): aicameraTypeTagMaterialTags
    //     .fromJson,
    // (LogsEntity).toString(): LogsEntity.fromJson,
    // (MaterielConfigCoffeeListEntity).toString(): MaterielConfigCoffeeListEntity
    //     .fromJson,
    // (MaterielConfigCoffeeListMaterialVOSet)
    //     .toString(): MaterielConfigCoffeeListMaterialVOSet.fromJson,
    // (MaterielConfigPowderListEntity).toString(): MaterielConfigPowderListEntity
    //     .fromJson,
    // (MaterielConfigPowderListMaterialVO)
    //     .toString(): MaterielConfigPowderListMaterialVO.fromJson,
    // (MaterielConfigSeparatorListEntity)
    //     .toString(): MaterielConfigSeparatorListEntity.fromJson,
    // (MaterielConfigSeparatorListMaterialVO)
    //     .toString(): MaterielConfigSeparatorListMaterialVO.fromJson,
    // (MaterielConfigSyrupListEntity).toString(): MaterielConfigSyrupListEntity
    //     .fromJson,
    // (MaterielConfigSyrupListMaterialVO)
    //     .toString(): MaterielConfigSyrupListMaterialVO.fromJson,
    // (MaterielConfigWaterListEntity).toString(): MaterielConfigWaterListEntity
    //     .fromJson,
    // (MaterielConfigWaterListWaterVO).toString(): MaterielConfigWaterListWaterVO
    //     .fromJson,
    // (MaterielCupDropperEntity).toString(): MaterielCupDropperEntity.fromJson,
    // (MaterielCupDropperCup).toString(): MaterielCupDropperCup.fromJson,
    // (MaterielIceDeviceEntity).toString(): MaterielIceDeviceEntity.fromJson,
    // (MaterielIceDeviceIceVO).toString(): MaterielIceDeviceIceVO.fromJson,
    // (MaterielManageItemEntity).toString(): MaterielManageItemEntity.fromJson,
    // (MaterielTypeEntity).toString(): MaterielTypeEntity.fromJson,
    // (PowderEntity).toString(): PowderEntity.fromJson,
    // (RelevanceaicameraEntity).toString(): RelevanceaicameraEntity.fromJson,
    // (SeparatorItemEntity).toString(): SeparatorItemEntity.fromJson,
    // (SyrupEntity).toString(): SyrupEntity.fromJson,
    // (UserEntity).toString(): UserEntity.fromJson,
    // (UserSelectEntity).toString(): UserSelectEntity.fromJson,
    // (WaterEntity).toString(): WaterEntity.fromJson,
  };

  bool containsKey(String type) {
    return convertFuncMap.containsKey(type);
  }

  JsonConvertFunction? operator [](String key) {
    return convertFuncMap[key];
  }
}